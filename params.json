{"name":"Springie","tagline":"A force directed graph layout algorithm in JavaScript","body":"Springie\r\n====\r\n\r\nA force directed graph layout algorithm in JavaScript. Adapted from https://github.com/dhotson/springy but including support for IE8+. Even though we've named the project \"Springie\" to indicate \"IE\" support, we've retained the original file names of \"springy.js\" and \"springyui.js\" so as to be a simple drop in fix of your current files. \r\n\r\nWhat is this?\r\n----\r\n\r\nSpringie is a force directed graph layout algorithm.\r\n\r\nSo what does this 'force directed' stuff mean anyway? Excellent question!\r\n\r\nIt basically means that it uses some real world physics to try and\r\nfigure out how to show a network graph in a nice way.\r\n\r\nTry to imagine it as a bunch of springs connected to each other.\r\n\r\n\r\nDemo\r\n----\r\n\r\n[Canvas based](http://entagen.github.com/springie/demo.html) (IE9, Chrome, FireFox, Safari, etc)\r\n\r\n[Raphael/SVG based](http://entagen.github.com/springie/demo-raphael.html) (IE6+, Chrome, FireFox, Safari, etc)\r\n\r\nBasic Usage\r\n----\r\n\r\nspringy.js by itself is quite plain and doesn't include any code to do rendering\r\nor drag and drop etc. It's just for calculating the layout.\r\n\r\nThe drawing and interaction stuff is mostly up to you.\r\n\r\nHowever, we've provided springyui.js to help get you started. It has a semi-decent default renderer and some half assed drag and drop.\r\n\r\nSee demo.html and springyui.js for an example of usage.\r\n\r\n\r\nAdvanced Usage\r\n----\r\n\r\nIf you're keen to do your own custom drawing, you'll need to know a few\r\nthings before you get started.\r\n\r\nThis is the basic graph API, you can create nodes and edges etc.\r\n\r\n    // make a new graph\r\n    var graph = new Graph();\r\n\r\n    // make some nodes\r\n    var node1 = graph.newNode({label: '1'});\r\n    var node2 = graph.newNode({label: '2'});\r\n\r\n    // connect them with an edge\r\n    graph.newEdge(node1, node2);\r\n\r\nSo now to draw this graph, lets make a layout object:\r\n\r\n    var layout = new Layout.ForceDirected(graph, 400.0, 400.0, 0.5);\r\n\r\nI've written a Renderer class, which will handle the rendering loop.\r\nYou just need to provide some callbacks to do the actual drawing.\r\n\r\n    var renderer = new Renderer(10, layout,\r\n      function clear() {\r\n        // code to clear screen\r\n      },\r\n      function drawEdge(edge, p1, p2) {\r\n        // draw an edge\r\n      },\r\n      function drawNode(node, p) {\r\n        // draw a node\r\n      }\r\n    );\r\n\r\nNow, just start the rendering loop:\r\n\r\n    renderer.start();\r\n\r\n\r\nFurther Reading\r\n----\r\n\r\nHave a look at the code in springy.js.\r\nSeriously, it's not very much code and it should be pretty easy to understand.\r\n\r\nPlease let me know if anything is unclear. Feedback is welcome.\r\n\r\nLicense\r\n----\r\nMIT\r\n\r\nAcknowledgements\r\n----\r\n\r\n[@dhotson](http://dhotson.github.com/) (original author) and everyone involved with the original [Springy](https://github.com/dhotson/springy) project.  \r\n[@zcourts](https://github.com/zcourts) for providing a fix for versions older than IE9 ","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}